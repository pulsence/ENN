using System;
using System.Collections.Generic;

namespace ENN.Framework
{
    public class BasicNode : INode
    {
        //fields
        protected float[] constants;
	    protected ActivationFunction activationFunction;
	    
        //properties
        public float[] Constants { set { constants = value; } }
        public ActivationFunction ActivationFunc { set { activationFunction = value; } }

	    public BasicNode() : this(null, null){}
	
	    public BasicNode(float[] constants, ActivationFunction activationFunction){
		    if(constants != null) this.constants = constants;
		
		    if(activationFunction != null){
			    this.activationFunction = activationFunction;
		    }
		    else{
			    activationFunction = delegate(float value)
                {
					if(value <= 0) return 0;
					return 1;
			    };
		    }
	    }

	    /// <summary>
	    /// Calculates the value for the node. The value is found by summing the value
        /// of each nodeValue multiplied by its corresponding constant. This value is
        /// then passed to the activation function. The value generated by the
        /// activation function is then returned.
	    /// </summary>
        /// <param name="nodeValues">An array of values from the nodes in the layer below
        /// the layer that this node resides in.</param>
        /// <returns>the value calculated.</returns>
	    public virtual float GetValue(float[] nodeValues){
		    float value = 0;
            float wieght;
		    for(int i = 0; i < nodeValues.Length; i++){
                if (i < constants.Length) wieght = constants[i];
                else wieght = 1.0f;
			    value += nodeValues[i]*wieght;
		    }
		
		    return activationFunction(value);
	    }
    }
}
